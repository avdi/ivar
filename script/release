#!/usr/bin/env ruby
# frozen_string_literal: true

# This script helps with releasing a new version of the gem
# Usage: script/release [major|minor|patch] [options]
#
# Options:
#   --yes, -y     Skip confirmation prompt
#   --no-push     Skip pushing changes to remote repository

require "bundler/gem_tasks"
require_relative "../lib/ivar/version"

def error(message)
  puts "\e[31mError: #{message}\e[0m"
  exit 1
end

def success(message)
  puts "\e[32m#{message}\e[0m"
end

def info(message)
  puts "\e[34m#{message}\e[0m"
end

def get_new_version(current_version, bump_type)
  major, minor, patch = current_version.split(".").map(&:to_i)

  case bump_type
  when "major"
    "#{major + 1}.0.0"
  when "minor"
    "#{major}.#{minor + 1}.0"
  when "patch"
    "#{major}.#{minor}.#{patch + 1}"
  else
    error "Invalid bump type. Use 'major', 'minor', or 'patch'."
  end
end

def update_version_file(new_version)
  version_file_path = "lib/ivar/version.rb"
  version_content = File.read(version_file_path)
  updated_content = version_content.gsub(/VERSION = "[0-9]+\.[0-9]+\.[0-9]+"/, "VERSION = \"#{new_version}\"")
  File.write(version_file_path, updated_content)
end

def update_changelog(new_version)
  changelog_path = "CHANGELOG.md"
  changelog_content = File.read(changelog_path)

  # Check if there are unreleased changes
  unless changelog_content.include?("## [Unreleased]")
    error "No unreleased changes found in CHANGELOG.md. Add changes before releasing."
  end

  # Update the changelog with the new version
  today = Time.now.strftime("%Y-%m-%d")
  updated_content = changelog_content.gsub(
    "## [Unreleased]",
    "## [Unreleased]\n\n## [#{new_version}] - #{today}"
  )

  File.write(changelog_path, updated_content)
end

def run_tests
  info "Running tests..."
  system("bundle exec rake test") || error("Tests failed. Fix the tests before releasing.")
end

def run_linter
  info "Running linter..."
  system("bundle exec rake standard") || error("Linter found issues. Fix them before releasing.")
end

def clean_build_artifacts
  info "Cleaning build artifacts..."
  system("bundle exec rake clean clobber")
  # Also remove any stray .gem files in the project root
  Dir.glob("*.gem").each do |gem_file|
    info "Removing stray gem file: #{gem_file}"
    File.delete(gem_file)
  end
end

def check_for_uncommitted_changes
  info "Checking for uncommitted changes..."
  uncommitted_changes = `git status --porcelain`.strip

  if uncommitted_changes.empty?
    info "No uncommitted changes detected."
    false
  else
    info "Uncommitted changes detected:"
    puts uncommitted_changes
    true
  end
end

def commit_remaining_changes(new_version)
  info "Committing remaining changes after release process..."
  system("git add --all")
  system("git commit -m \"Post-release cleanup for v#{new_version}\"")
  info "Remaining changes committed."
end

def push_changes_and_tag(new_version)
  # Check for any uncommitted changes before pushing
  has_uncommitted_changes = check_for_uncommitted_changes

  # If there are uncommitted changes, commit them
  if has_uncommitted_changes
    commit_remaining_changes(new_version)
  end

  info "Pushing changes to remote repository..."
  system("git push origin main") || error("Failed to push changes to remote repository.")

  info "Pushing tag v#{new_version} to remote repository..."
  system("git push origin v#{new_version}") || error("Failed to push tag to remote repository.")

  success "Changes and tag pushed successfully!"
end

def update_gemfile_lock
  info "Updating Gemfile.lock with new version..."
  system("bundle install") || error("Failed to update Gemfile.lock. Run 'bundle install' manually and try again.")
  info "Gemfile.lock updated successfully."
end

def commit_and_tag(new_version, skip_push = false)
  info "Committing version bump..."

  # Add all relevant files to staging
  system("git add lib/ivar/version.rb CHANGELOG.md Gemfile.lock")

  # Commit the changes
  system("git commit -m \"Bump version to #{new_version}\"")

  info "Creating tag v#{new_version}..."
  system("git tag -a v#{new_version} -m \"Version #{new_version}\"")

  if skip_push
    info "Skipping push to remote repository."
    info "To push the new version manually, run:"
    puts "  git push origin main && git push origin v#{new_version}"
  else
    push_changes_and_tag(new_version)
  end
end

# Main script
error "Please specify a version bump type: major, minor, or patch" if ARGV.empty?

# Parse arguments
args = ARGV.dup
skip_confirmation = args.delete("--yes") || args.delete("-y")
skip_push = args.delete("--no-push")
bump_type = args[0].downcase if args[0]

error "Please specify a version bump type: major, minor, or patch" unless bump_type

current_version = Ivar::VERSION
new_version = get_new_version(current_version, bump_type)

info "Current version: #{current_version}"
info "New version: #{new_version}"

# Skip confirmation if --yes/-y option is provided
confirmation = "y" if skip_confirmation

unless confirmation
  puts "Continue? (y/n)"
  confirmation = $stdin.gets.chomp.downcase
end

if confirmation == "y"
  clean_build_artifacts
  run_tests
  run_linter
  update_version_file(new_version)
  update_changelog(new_version)
  update_gemfile_lock
  commit_and_tag(new_version, skip_push)
  success "Version bumped to #{new_version}!"

  if skip_push
    success "Remember to push changes manually to trigger the release workflow."
  else
    success "Release workflow triggered!"

    # Final check for any remaining uncommitted changes
    if check_for_uncommitted_changes
      info "There are still uncommitted changes after the release process."
      puts "Would you like to commit and push these changes? (y/n)"
      cleanup_confirmation = $stdin.gets.chomp.downcase

      if cleanup_confirmation == "y"
        commit_remaining_changes(new_version)
        system("git push origin main") || error("Failed to push cleanup changes.")
        success "Post-release cleanup completed and pushed successfully!"
      else
        info "Uncommitted changes left in working directory."
      end
    else
      success "Working directory is clean. Release completed successfully!"
    end
  end
else
  info "Release cancelled."
end
